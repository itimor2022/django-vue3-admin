# -*- coding: utf-8 -*-

import requests
import json
import time
import datetime
import hmac
import base64
import pandas as pd
import numpy as np

# ËÆæÁΩÆÊúÄÂ§ßÂàóÊï∞ÔºåÈÅøÂÖçÂè™ÊòæÁ§∫ÈÉ®ÂàÜÂàó
pd.set_option('display.max_columns', 1000)
# ËÆæÁΩÆÊúÄÂ§ßË°åÊï∞ÔºåÈÅøÂÖçÂè™ÊòæÁ§∫ÈÉ®ÂàÜË°åÊï∞ÊçÆ
pd.set_option('display.max_rows', 1000)
# ËÆæÁΩÆÊòæÁ§∫ÂÆΩÂ∫¶
pd.set_option('display.width', 1000)
# ËÆæÁΩÆÊØèÂàóÊúÄÂ§ßÂÆΩÂ∫¶ÔºåÈÅøÂÖçÂ±ûÊÄßÂÄºÊàñÂàóÂêçÊòæÁ§∫‰∏çÂÖ®
pd.set_option('display.max_colwidth', 1000)

'''para
'''
t = int(time.time())
period = '3m'
chat_id = "-1002086380388"
GET = "GET"
POST = "POST"
API_URL = 'https://www.okx.com'
SERVER_TIMESTAMP_URL = '/api/v5/public/time'
# header
APPLICATION_JSON = 'application/json'
CONTENT_TYPE = 'Content-Type'
OK_ACCESS_KEY = 'OK-ACCESS-KEY'
OK_ACCESS_SIGN = 'OK-ACCESS-SIGN'
OK_ACCESS_TIMESTAMP = 'OK-ACCESS-TIMESTAMP'
OK_ACCESS_PASSPHRASE = 'OK-ACCESS-PASSPHRASE'


def send_message(msg, chat_id="-4591709428"):
    token1 = "7114302"
    token2 = "389:AAHaFEzUwXj7QC1A20qwi_tJGlkRtP6FOlg"
    url = f"https://api.telegram.org/bot{token1}{token2}/sendMessage?chat_id={chat_id}&text={msg}&parse_mode=HTML"
    r = requests.get(url)
    print(r.json())


##############################################################
##############################################################
'''
mod
'''


class base():
    def clean_dict_none(d: dict) -> dict:
        return {k: d[k] for k in d.keys() if d[k] != None}

    def get_timestamp():
        now = datetime.datetime.utcnow()
        t = now.isoformat("T", "milliseconds")
        return t + "Z"

    def sign(message, secretKey):
        mac = hmac.new(bytes(secretKey, encoding='utf8'), bytes(message, encoding='utf-8'), digestmod='sha256')
        d = mac.digest()
        return base64.b64encode(d)

    def pre_hash(timestamp, method, request_path, body):
        return str(timestamp) + str.upper(method) + request_path + body

    def get_header(api_key, sign, timestamp, passphrase, flag):
        header = dict()
        header[CONTENT_TYPE] = APPLICATION_JSON
        header[OK_ACCESS_KEY] = api_key
        header[OK_ACCESS_SIGN] = sign
        header[OK_ACCESS_TIMESTAMP] = str(timestamp)
        header[OK_ACCESS_PASSPHRASE] = passphrase
        header['FLAG'] = flag
        return header

    def parse_para_to_str(para):
        para = base.clean_dict_none(para)
        url = '?'
        for key, value in para.items():
            url = url + str(key) + '=' + str(value) + '&'
        return url[0:-1]


class Client(object):

    def __init__(self, api_key, api_secret_key, passphrase, use_server_time=False, flag='1'):

        self.API_KEY = api_key
        self.API_SECRET_KEY = api_secret_key
        self.PASSPHRASE = passphrase
        self.use_server_time = use_server_time
        self.flag = flag

    def _request(self, method, request_path, para):

        if method == GET:
            request_path = request_path + base.parse_para_to_str(para)
        # url
        url = API_URL + request_path
        print(url)

        timestamp = base.get_timestamp()

        # sign & header
        if self.use_server_time:
            timestamp = self.get_timestamp()

        body = json.dumps(para) if method == POST else ""

        sign = base.sign(base.pre_hash(timestamp, method, request_path, str(body)), self.API_SECRET_KEY)
        header = base.get_header(self.API_KEY, sign, timestamp, self.PASSPHRASE, self.flag)
        response = None
        if method == GET:
            response = requests.get(url, headers=header)
        elif method == POST:
            response = requests.post(url, data=body, headers=header)

        return response.json()

    def request_with_para(self, method, request_path, para):
        return self._request(method, request_path, para)

    def get_timestamp(self):
        url = API_URL + SERVER_TIMESTAMP_URL
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()['ts']
        else:
            return ""


class MarketAPI(Client):

    def __init__(self, api_key, api_secret_key, passphrase, use_server_time=False, flag='1'):
        Client.__init__(self, api_key, api_secret_key, passphrase, use_server_time, flag)

    def get_history_candlesticks(self, instId, after=None, before=None, bar=None, limit=None):
        url = '/api/v5/market/history-candles'
        para = {'instId': instId, 'after': after, 'before': before, 'bar': bar, 'limit': limit}
        return self.request_with_para(GET, url, para)


def format_time(time_stamp, tz=0):
    dt = datetime.datetime.fromtimestamp(time_stamp)
    # ËÆæÁΩÆÊó∂Âå∫
    x = dt.astimezone(datetime.timezone(datetime.timedelta(hours=tz)))
    # Ê†ºÂºèÂåñÊó•Êúü
    dd = x.strftime("%Y-%m-%d %H:%M:%S %Z%z")
    return dd


def get_coin():
    period = '5m'
    # ÁÉ≠Èó®Ê¶ú
    url = f"https://www.okx.com/priapi/v5/rubik/web/public/hot-rank?countryFilter=1&rank=0&zone=utc8&period={period}&type=USDT&t={t}"
    # Êàê‰∫§È¢ù
    # url = f"https://www.okx.com/priapi/v5/rubik/web/public/turn-over-rank?countryFilter=1&rank=0&zone=utc8&period={period}&type=USDT&t={t}"
    # pair_list = ['CATI-USDT']
    r = requests.get(url)
    c = r.json()['data']['data'][:15]
    print(c)


def get_coin_data(coin):
    title = f'üèÜ{coin}üèÜ\n'
    # result = marketAPI.get_history_candlesticks(coin, bar=period)['data']
    result = [
        ['1741827000000', '83606.9', '83609.8', '83484', '83508.5', '10.52637912', '879431.45497005', '879431.45497005',
         '1'], ['1741826700000', '83830.6', '83841.4', '83591.5', '83606.8', '25.01566913', '2093946.209570987',
                '2093946.209570987', '1'],
        ['1741826400000', '83810.7', '83943.7', '83801', '83829.3', '20.35354858', '1707113.226766853',
         '1707113.226766853', '1'],
        ['1741826100000', '83752.9', '83955', '83738.1', '83811.1', '29.56507373', '2480434.215136398',
         '2480434.215136398', '1'],
        ['1741825800000', '83705', '83752.9', '83593.7', '83752.9', '15.43324359', '1290781.857722735',
         '1290781.857722735', '1'],
        ['1741825500000', '83868.1', '84000', '83705.1', '83705.1', '58.95683665', '4948075.172895761',
         '4948075.172895761', '1'],
        ['1741825200000', '83597.5', '83973.9', '83597.4', '83872.2', '49.09826555', '4119435.831120208',
         '4119435.831120208', '1'],
        ['1741824900000', '83643.6', '83664.5', '83476.2', '83591.6', '18.50001658', '1545912.670812772',
         '1545912.670812772', '1'],
        ['1741824600000', '83671.6', '83727.6', '83612', '83637.9', '19.67962782', '1646193.165552842',
         '1646193.165552842', '1'],
        ['1741824300000', '83801.1', '83801.1', '83600', '83671.5', '14.58373342', '1220608.525544806',
         '1220608.525544806', '1'],
        ['1741824000000', '83691.9', '83831.9', '83612.6', '83792', '57.25176925', '4791307.567782647',
         '4791307.567782647', '1'],
        ['1741823700000', '83898.1', '83898.1', '83639.2', '83691.9', '17.02352101', '1426156.388383762',
         '1426156.388383762', '1'],
        ['1741823400000', '83716', '83903.3', '83716', '83898.2', '140.76860226', '11801930.904064566',
         '11801930.904064566', '1'],
        ['1741823100000', '83687.4', '83728', '83647', '83716', '21.40960346', '1791817.207929938', '1791817.207929938',
         '1'], ['1741822800000', '83622.1', '83708', '83604.4', '83688.1', '7.91189298', '661918.462688351',
                '661918.462688351', '1'],
        ['1741822500000', '83536.5', '83648.8', '83536.5', '83622.1', '9.20200104', '769223.492070979',
         '769223.492070979', '1'],
        ['1741822200000', '83457.1', '83560.1', '83405.8', '83537.9', '9.18971847', '767232.141800743',
         '767232.141800743', '1'],
        ['1741821900000', '83496.8', '83526.3', '83432', '83458.3', '34.17383154', '2852657.995314573',
         '2852657.995314573', '1'],
        ['1741821600000', '83527.3', '83578.6', '83480', '83496.9', '9.15065161', '764396.946370592',
         '764396.946370592', '1'],
        ['1741821300000', '83575.3', '83596.6', '83462.4', '83527.3', '10.83734296', '905168.608023272',
         '905168.608023272', '1'],
        ['1741821000000', '83591.9', '83744', '83516.8', '83577.5', '13.31893047', '1113467.252515391',
         '1113467.252515391', '1'],
        ['1741820700000', '83525.3', '83652.4', '83513.3', '83591.9', '11.46384764', '958064.256719872',
         '958064.256719872', '1'],
        ['1741820400000', '83657.5', '83685.1', '83525.3', '83525.3', '16.87364574', '1410443.073378524',
         '1410443.073378524', '1'],
        ['1741820100000', '83690.5', '83695.4', '83646.7', '83653.4', '4.29133194', '359084.673413875',
         '359084.673413875', '1'],
        ['1741819800000', '83556', '83690.6', '83556', '83690.5', '6.96660122', '582614.849490104', '582614.849490104',
         '1'], ['1741819500000', '83613.9', '83671.1', '83536.1', '83555.9', '10.50924573', '878528.246142095',
                '878528.246142095', '1'],
        ['1741819200000', '83648.2', '83668.6', '83551.5', '83613.8', '19.35621474', '1618498.606419297',
         '1618498.606419297', '1'],
        ['1741818900000', '83511.9', '83670', '83497.5', '83648.2', '21.79341132', '1822130.882254144',
         '1822130.882254144', '1'],
        ['1741818600000', '83503.9', '83590', '83436', '83511.9', '18.61360011', '1554649.489477747',
         '1554649.489477747', '1'],
        ['1741818300000', '83530.1', '83583.2', '83480.9', '83504', '12.14459504', '1014489.954436464',
         '1014489.954436464', '1'],
        ['1741818000000', '83348.9', '83557.1', '83348.9', '83530.1', '30.40552764', '2538220.842056217',
         '2538220.842056217', '1'],
        ['1741817700000', '83389.2', '83470.7', '83327.3', '83349.1', '20.40131618', '1701521.473047516',
         '1701521.473047516', '1'],
        ['1741817400000', '83280.1', '83436.8', '83239.2', '83396.5', '16.38380526', '1365318.038279299',
         '1365318.038279299', '1'],
        ['1741817100000', '83304', '83313.2', '83171.5', '83284.6', '11.96096998', '995677.00028291', '995677.00028291',
         '1'], ['1741816800000', '83086.4', '83375', '83078.1', '83302.4', '33.96132111', '2825887.081828986',
                '2825887.081828986', '1'],
        ['1741816500000', '82891.5', '83100', '82846.1', '83086.4', '10.03211704', '832500.684375223',
         '832500.684375223', '1'],
        ['1741816200000', '83035.9', '83066.6', '82891.6', '82891.6', '2.28526846', '189655.482307776',
         '189655.482307776', '1'],
        ['1741815900000', '83096.1', '83153.7', '82971', '83033.5', '9.00730951', '748386.464267006',
         '748386.464267006', '1'],
        ['1741815600000', '83092.8', '83143.4', '83042.6', '83099.7', '9.0700218', '753752.507562587',
         '753752.507562587', '1'],
        ['1741815300000', '83163.8', '83184.1', '83092.8', '83092.8', '2.88004538', '239461.384058217',
         '239461.384058217', '1'],
        ['1741815000000', '83141.9', '83266.4', '83141.9', '83163.7', '4.83321482', '402254.431810247',
         '402254.431810247', '1'],
        ['1741814700000', '83213.5', '83225.1', '83110.9', '83129.7', '5.15889918', '429011.113080776',
         '429011.113080776', '1'],
        ['1741814400000', '83264', '83321.6', '83206.7', '83213.5', '2.89526127', '241144.951829371',
         '241144.951829371', '1'],
        ['1741814100000', '83285', '83306.5', '83212.6', '83264.1', '4.98115978', '414816.856714168',
         '414816.856714168', '1'],
        ['1741813800000', '83145.6', '83295', '83131.1', '83284.9', '7.93718146', '660740.252937948',
         '660740.252937948', '1'],
        ['1741813500000', '83243.6', '83275.2', '83138.7', '83145.7', '3.45957514', '287791.298537346',
         '287791.298537346', '1'],
        ['1741813200000', '83117.5', '83295', '83117.4', '83243.5', '14.68830725', '1222190.960570954',
         '1222190.960570954', '1'],
        ['1741812900000', '83043.6', '83149.2', '83043.6', '83117.5', '20.74553458', '1723967.415884441',
         '1723967.415884441', '1'],
        ['1741812600000', '83108.1', '83133.3', '83011.2', '83042.6', '6.55149208', '544294.757691912',
         '544294.757691912', '1'],
        ['1741812300000', '83144.2', '83187.7', '83102.1', '83108', '9.07130005', '754214.845649225',
         '754214.845649225', '1'],
        ['1741812000000', '83164', '83187.7', '83131.5', '83143.9', '7.64153348', '635472.823161789',
         '635472.823161789', '1'],
        ['1741811700000', '82995.6', '83187.8', '82987.5', '83163.9', '15.69590312', '1304717.222037323',
         '1304717.222037323', '1'],
        ['1741811400000', '82868.4', '83041.1', '82868.4', '82995.6', '4.66526584', '387144.467884494',
         '387144.467884494', '1'],
        ['1741811100000', '82953.1', '82953.1', '82848.9', '82868.4', '3.03575435', '251669.776558643',
         '251669.776558643', '1'],
        ['1741810800000', '82821.8', '82965.2', '82759.8', '82958.2', '10.53467675', '872708.440900757',
         '872708.440900757', '1'],
        ['1741810500000', '82774.3', '82863.2', '82738', '82818.7', '2.20743224', '182788.51531002', '182788.51531002',
         '1'], ['1741810200000', '82844.4', '82853.2', '82740.9', '82774.2', '2.76514882', '228995.438845248',
                '228995.438845248', '1'],
        ['1741809900000', '82829.2', '82909.3', '82711.5', '82838.1', '14.5181133', '1202579.961409967',
         '1202579.961409967', '1'],
        ['1741809600000', '82916.1', '82953', '82797.8', '82838.1', '10.17738307', '843673.831106235',
         '843673.831106235', '1'],
        ['1741809300000', '82932.6', '83155.4', '82909.1', '82915.5', '63.7990534', '5298281.302240651',
         '5298281.302240651', '1'],
        ['1741809000000', '82880', '82998.2', '82666.6', '82930.8', '35.57125834', '2946940.220050556',
         '2946940.220050556', '1'],
        ['1741808700000', '82672.3', '82886.8', '82662', '82880', '11.1190224', '920086.643489272', '920086.643489272',
         '1'], ['1741808400000', '82643.3', '82685.2', '82491.2', '82672.3', '13.01299392', '1074640.672783884',
                '1074640.672783884', '1'],
        ['1741808100000', '82934.4', '82939.5', '82611.1', '82642.8', '34.8035417', '2882849.945052087',
         '2882849.945052087', '1'],
        ['1741807800000', '82770.3', '82973.6', '82770.3', '82935', '17.8894663', '1482842.541163699',
         '1482842.541163699', '1'],
        ['1741807500000', '82771.7', '82888.7', '82709.9', '82770.2', '47.42642133', '3925405.672712946',
         '3925405.672712946', '1'],
        ['1741807200000', '82944', '83038.1', '82739.2', '82761.9', '100.83429954', '8351453.135156785',
         '8351453.135156785', '1'],
        ['1741806900000', '82918.2', '82979', '82730.1', '82942', '46.99839999', '3896822.482452247',
         '3896822.482452247', '1'],
        ['1741806600000', '82767', '82936', '82754.2', '82918.2', '24.33058896', '2016202.043680616',
         '2016202.043680616', '1'],
        ['1741806300000', '82652.6', '82777.2', '82535.9', '82767', '15.70357458', '1298070.077668613',
         '1298070.077668613', '1'],
        ['1741806000000', '82637.9', '82694.9', '82482.5', '82652.9', '12.34698173', '1019772.753072968',
         '1019772.753072968', '1'],
        ['1741805700000', '82596.2', '82655.3', '82500', '82637.2', '33.77385935', '2788592.675050544',
         '2788592.675050544', '1'],
        ['1741805400000', '82788.1', '82797.6', '82547.1', '82599.6', '10.11424547', '836237.203484108',
         '836237.203484108', '1'],
        ['1741805100000', '82710.5', '82809.5', '82638.7', '82789.3', '17.06218351', '1411649.766298892',
         '1411649.766298892', '1'],
        ['1741804800000', '82649.1', '82751.7', '82571.2', '82710.5', '7.56194469', '625318.994334379',
         '625318.994334379', '1'],
        ['1741804500000', '82651.1', '82718.6', '82504.9', '82649.1', '6.85059073', '565915.677629692',
         '565915.677629692', '1'],
        ['1741804200000', '82530.1', '82650', '82348', '82650', '20.84285454', '1719906.746651217', '1719906.746651217',
         '1'], ['1741803900000', '82584.3', '82659.3', '82502.9', '82538.6', '23.78013386', '1963790.64499101',
                '1963790.64499101', '1'],
        ['1741803600000', '82534.3', '82711.3', '82446.5', '82585', '26.66841237', '2201974.046093398',
         '2201974.046093398', '1'],
        ['1741803300000', '82363.3', '82646.9', '82331.7', '82535.2', '51.42594743', '4243963.672300179',
         '4243963.672300179', '1'],
        ['1741803000000', '82079.5', '82386', '82079.5', '82369.6', '34.60363554', '2845505.269448674',
         '2845505.269448674', '1'],
        ['1741802700000', '81946.6', '82079.5', '81825', '82079.5', '27.16718523', '2226940.415291533',
         '2226940.415291533', '1'],
        ['1741802400000', '81848.5', '82059.5', '81724.6', '81949.9', '36.655096', '3003527.145052604',
         '3003527.145052604', '1'],
        ['1741802100000', '82104.3', '82104.4', '81764.5', '81842.8', '59.03106992', '4833887.080193255',
         '4833887.080193255', '1'],
        ['1741801800000', '82335.9', '82363.6', '82093.9', '82104.4', '52.05066053', '4280687.636632247',
         '4280687.636632247', '1'],
        ['1741801500000', '82434.5', '82541.7', '82290', '82335.9', '26.58785076', '2191405.789755554',
         '2191405.789755554', '1'],
        ['1741801200000', '82469.1', '82593.8', '82424.9', '82434.4', '25.9998735', '2145132.013499291',
         '2145132.013499291', '1'],
        ['1741800900000', '82602', '82693.5', '82442.4', '82469.1', '29.81538312', '2462401.946505764',
         '2462401.946505764', '1'],
        ['1741800600000', '82770.1', '82883.9', '82548.6', '82601.9', '58.82346055', '4866423.540484976',
         '4866423.540484976', '1'],
        ['1741800300000', '82681.3', '82792.9', '82573', '82769', '45.71953271', '3780952.221682644',
         '3780952.221682644', '1'],
        ['1741800000000', '82692.1', '82892.2', '82675.6', '82682', '100.47415747', '8318173.944386435',
         '8318173.944386435', '1'],
        ['1741799700000', '82457.5', '82788.1', '82420', '82692.1', '42.4906431', '3511357.669529265',
         '3511357.669529265', '1'],
        ['1741799400000', '82417.3', '82567', '82375.9', '82456.3', '65.79034004', '5425274.595595407',
         '5425274.595595407', '1'],
        ['1741799100000', '82157.7', '82456', '82141.7', '82423.1', '56.4140289', '4641619.078377844',
         '4641619.078377844', '1'],
        ['1741798800000', '81973', '82191.5', '81895.7', '82157.7', '27.51562146', '2258743.990621349',
         '2258743.990621349', '1'],
        ['1741798500000', '81939.6', '82104.8', '81922.7', '81965.5', '71.29190491', '5846252.291302829',
         '5846252.291302829', '1'],
        ['1741798200000', '82022.2', '82093.8', '81775', '81938.6', '19.31430874', '1582180.897046738',
         '1582180.897046738', '1'],
        ['1741797900000', '81662', '82070.8', '81662', '82021', '48.92215676', '4003364.326864467', '4003364.326864467',
         '1'], ['1741797600000', '82062.8', '82066.5', '81655.4', '81662', '37.68277531', '3084830.01816992',
                '3084830.01816992', '1'],
        ['1741797300000', '82085.9', '82233', '82042.8', '82062.9', '27.89555114', '2291384.455011473',
         '2291384.455011473', '1']]
    df = pd.DataFrame(result)
    col = ['timestamp', 'open', 'high', 'close', 'low', 'volume', 'amount', '-', '-']
    df.columns = col
    df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')
    df = df[['datetime', 'open', 'high', 'close', 'low', 'volume', 'amount', 'timestamp']]
    return df


def calculate_fractals(df):
    df['m_high'] = df['high'].rolling(30).max()
    df['m_low'] = df['low'].rolling(30).min()
    """Calculate fractals"""
    df['f_high'] = np.where(
        (df['m_high'] == df['high']) &
        (df['high'] > df['high'].shift(1)) &
        (df['high'] >= df['high'].shift(-1)) &
        (df['high'] > df['high'].shift(2)) &
        (df['high'] >= df['high'].shift(-2))
        , np.True_, np.False_
    )

    df['f_low'] = np.where(
        (df['m_low'] == df['low']) &
        (df['low'] < df['low'].shift(1)) &
        (df['low'] <= df['low'].shift(-1)) &
        (df['low'] < df['low'].shift(2)) &
        (df['low'] <= df['low'].shift(-2))
        , np.True_, np.False_
    )
    return df


def calculate_fractals2(df, window_size=2):
    df['Bearish_Fractal'] = 0
    df['Bullish_Fractal'] = 0

    for i in range(window_size, len(df) - window_size):
        if (
                df['high'].iloc[i] > df['high'].iloc[i - window_size] and
                df['high'].iloc[i] > df['high'].iloc[i - window_size + 1] and
                df['high'].iloc[i] > df['high'].iloc[i + 1] and
                df['high'].iloc[i] > df['high'].iloc[i + window_size]):
            df['Bearish_Fractal'].iloc[i] = df['high'].iloc[i]

        if (df['low'].iloc[i] < df['low'].iloc[i - window_size] and
                df['low'].iloc[i] < df['low'].iloc[i - window_size + 1] and
                df['low'].iloc[i] < df['low'].iloc[i + 1] and
                df['low'].iloc[i] < df['low'].iloc[i + window_size]):
            df['Bullish_Fractal'].iloc[i] = df['low'].iloc[i]
    return df


if __name__ == '__main__':
    api_key = "ff633c9f-eeb1-4073-bfbc-de5a93af409c"
    secret_key = "B0C40F0CE489B41E13B05495110D978D"
    passphrase = "Jay@541430183"
    flag = '1'
    marketAPI = MarketAPI(api_key, secret_key, passphrase, False, flag)
    coin = 'BTC-USDT'
    df = get_coin_data(coin)
    df = calculate_fractals(df)
    print(df)
