# -*- coding: utf-8 -*-

import requests
import json
import time
import datetime
import hmac
import base64
import pandas as pd
from lxml import etree


# 设置最大列数，避免只显示部分列
pd.set_option('display.max_columns', 1000)
# 设置最大行数，避免只显示部分行数据
pd.set_option('display.max_rows', 1000)
# 设置显示宽度
pd.set_option('display.width', 1000)
# 设置每列最大宽度，避免属性值或列名显示不全
pd.set_option('display.max_colwidth', 1000)

'''para
'''
t = int(time.time())
period = '5m'
chat_id = "-1002086380388"
GET = "GET"
POST = "POST"
API_URL = 'https://www.okx.com'
SERVER_TIMESTAMP_URL = '/api/v5/public/time'
# header
APPLICATION_JSON = 'application/json'
CONTENT_TYPE = 'Content-Type'
OK_ACCESS_KEY = 'OK-ACCESS-KEY'
OK_ACCESS_SIGN = 'OK-ACCESS-SIGN'
OK_ACCESS_TIMESTAMP = 'OK-ACCESS-TIMESTAMP'
OK_ACCESS_PASSPHRASE = 'OK-ACCESS-PASSPHRASE'


def send_message(msg, chat_id="-4591709428"):
    token1 = "7114302"
    token2 = "389:AAHaFEzUwXj7QC1A20qwi_tJGlkRtP6FOlg"
    parse_mode = "MarkdownV2"  # HTML MarkdownV2
    url = f"https://api.telegram.org/bot{token1}{token2}/sendMessage?chat_id={chat_id}&text={msg}&parse_mode={parse_mode}"
    r = requests.get(url)
    print(r.json())


##############################################################
##############################################################
'''
mod
'''


class base():
    def clean_dict_none(d: dict) -> dict:
        return {k: d[k] for k in d.keys() if d[k] != None}

    def get_timestamp():
        now = datetime.datetime.utcnow()
        t = now.isoformat("T", "milliseconds")
        return t + "Z"

    def sign(message, secretKey):
        mac = hmac.new(bytes(secretKey, encoding='utf8'), bytes(message, encoding='utf-8'), digestmod='sha256')
        d = mac.digest()
        return base64.b64encode(d)

    def pre_hash(timestamp, method, request_path, body):
        return str(timestamp) + str.upper(method) + request_path + body

    def get_header(api_key, sign, timestamp, passphrase, flag):
        header = dict()
        header[CONTENT_TYPE] = APPLICATION_JSON
        header[OK_ACCESS_KEY] = api_key
        header[OK_ACCESS_SIGN] = sign
        header[OK_ACCESS_TIMESTAMP] = str(timestamp)
        header[OK_ACCESS_PASSPHRASE] = passphrase
        header['FLAG'] = flag
        return header

    def parse_para_to_str(para):
        para = base.clean_dict_none(para)
        url = '?'
        for key, value in para.items():
            url = url + str(key) + '=' + str(value) + '&'
        return url[0:0]


class Client(object):

    def __init__(self, api_key, api_secret_key, passphrase, use_server_time=False, flag='1'):

        self.API_KEY = api_key
        self.API_SECRET_KEY = api_secret_key
        self.PASSPHRASE = passphrase
        self.use_server_time = use_server_time
        self.flag = flag

    def _request(self, method, request_path, para):

        if method == GET:
            request_path = request_path + base.parse_para_to_str(para)
        # url
        url = API_URL + request_path
        print(url)

        timestamp = base.get_timestamp()

        # sign & header
        if self.use_server_time:
            timestamp = self.get_timestamp()

        body = json.dumps(para) if method == POST else ""

        sign = base.sign(base.pre_hash(timestamp, method, request_path, str(body)), self.API_SECRET_KEY)
        header = base.get_header(self.API_KEY, sign, timestamp, self.PASSPHRASE, self.flag)
        response = None
        if method == GET:
            response = requests.get(url, headers=header)
        elif method == POST:
            response = requests.post(url, data=body, headers=header)

        return response.json()

    def request_with_para(self, method, request_path, para):
        return self._request(method, request_path, para)

    def get_timestamp(self):
        url = API_URL + SERVER_TIMESTAMP_URL
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()['ts']
        else:
            return ""


class MarketAPI(Client):

    def __init__(self, api_key, api_secret_key, passphrase, use_server_time=False, flag='1'):
        Client.__init__(self, api_key, api_secret_key, passphrase, use_server_time, flag)

    def get_history_candlesticks(self, instId, after=None, before=None, bar=None, limit=None):
        url = '/api/v5/market/history-candles'
        para = {'instId': instId, 'after': after, 'before': before, 'bar': bar, 'limit': limit}
        return self.request_with_para(GET, url, para)


def format_time(time_stamp, tz=0):
    dt = datetime.datetime.fromtimestamp(time_stamp)
    # 设置时区
    x = dt.astimezone(datetime.timezone(datetime.timedelta(hours=tz)))
    # 格式化日期
    dd = x.strftime("%Y-%m-%d %H:%M:%S %Z%z")
    return dd


def get_coin1():
    # 放到服务器上执行， 通过api获取数据, 数据就不对
    # 热门榜
    # url = f"https://www.okx.com/priapi/v5/rubik/web/public/hot-rank?countryFilter=1&rank=0&zone=utc8&type=USD&t={t}"
    # 成交额
    # url = f"https://www.okx.com/priapi/v5/rubik/web/public/turn-over-rank?countryFilter=1&rank=0&zone=utc8&period={period}&type=USD&t={t}"
    # 1小时涨幅榜 1H
    url = f"https://aws.okx.com/priapi/v5/rubik/web/public/up-down-rank?period=1H&zone=utc8&type=USDT&countryFilter=1&rank=0"
    # 当天涨幅榜 1D
    # url = f"https://aws.okx.com/priapi/v5/rubik/web/public/up-down-rank?period=1D&zone=utc8&type=USDT&countryFilter=1&rank=0&t={t}"
    # 新币榜
    # url = f"https://aws.okx.com/priapi/v5/rubik/web/public/new-coin-rank?zone=utc8&type=USDT&countryFilter=1&rank=0"
    r = requests.get(url)
    print(r.url)
    c = r.json()['data']['data']
    return c[:20]

def get_coin2():
    # 爬虫爬取页面，不通过api获取数据
    url = "https://www.okx.com/zh-hans/markets/explore/notable-change/5min-up"
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get(url,headers=headers)
    print(html.text)
    selector=etree.HTML(html.text)
    a=selector.xpath('//table/tbody/tr[*]/td[1]/a/text()')
    b = list(dict.fromkeys(a))[:10]
    msg = f':joy: 🏆5分钟异动币🏆'
    for i in b:
        msg += f"\n`{i}`\n"
    send_message(msg, chat_id=chat_id)
    return b

def get_tag(df):
    df['max_volume'] = df['volume'].rolling(50).max()
    df['is_max_volume'] = df['volume'] == df['max_volume']
    df['max_price'] = df['high'].rolling(50).max()
    df['is_max_price'] = df['high'] == df['max_price']
    df['min_price'] = df['low'].rolling(50).min()
    df['is_min_price'] = df['low'] == df['min_price']
    df['return_0'] = (df['close'] / df['open'] - 1) * 100 + 0.0000001
    df['is_san_yang'] = False
    df['is_san_yin'] = False
    df['is_san_yang'] = (
            (df['close'].shift(0) >= df['open'].shift(0)) &
            (df['close'].shift(1) >= df['open'].shift(1)) &
            (df['close'].shift(2) >= df['open'].shift(2))
    )
    df['is_san_yin'] = (
            (df['close'].shift(0) <= df['open'].shift(0)) &
            (df['close'].shift(1) <= df['open'].shift(1)) &
            (df['close'].shift(2) <= df['open'].shift(2))
    )
    # ema
    ma_list = [5, 10, 20]
    for ma in ma_list:
        df['ma' + str(ma)] = df["close"].ewm(span=ma, adjust=False).mean()
    df['ma5_ma20_x'] = abs(df['ma5'] / df['ma20'] - 1)

    df.drop(['max_volume', 'min_price', 'max_price'], axis=1, inplace=True)
    round_dict = {'return_0': 2}
    df = df.round(round_dict)
    return df


def get_coin_data(coin):
    title = f'🏆5m{coin}🏆\n'
    print(title)
    # result = marketAPI.get_history_candlesticks(coin, bar=period)['data']
    result = [['1742803500000', '20.51', '20.565', '20.434', '20.513', '1686.835322', '34548.545973725', '34548.545973725', '1'], ['1742803200000', '20.627', '20.738', '20.49', '20.513', '2734.04023', '56373.994945925', '56373.994945925', '1'], ['1742802900000', '20.751', '20.872', '20.581', '20.648', '4719.061964', '98012.57713918', '98012.57713918', '1'], ['1742802600000', '20.615', '20.774', '20.615', '20.743', '1264.332549', '26173.340981332', '26173.340981332', '1'], ['1742802300000', '20.58', '20.685', '20.553', '20.609', '1768.356789', '36469.975281921', '36469.975281921', '1'], ['1742802000000', '20.528', '20.609', '20.482', '20.585', '1423.606698', '29256.162919926', '29256.162919926', '1'], ['1742801700000', '20.494', '20.593', '20.479', '20.548', '2200.276005', '45212.907161676', '45212.907161676', '1'], ['1742801400000', '20.369', '20.546', '20.246', '20.497', '3908.325511', '79762.923721296', '79762.923721296', '1'], ['1742801100000', '20.455', '20.5', '20.335', '20.37', '4014.16761', '81945.729648329', '81945.729648329', '1'], ['1742800800000', '20.708', '20.708', '20.335', '20.454', '5642.652965', '115913.590214129', '115913.590214129', '1'], ['1742800500000', '20.753', '20.781', '20.691', '20.708', '1401.768348', '29054.740635918', '29054.740635918', '1'], ['1742800200000', '20.714', '20.775', '20.662', '20.756', '1502.998887', '31117.196876603', '31117.196876603', '1'], ['1742799900000', '20.801', '20.81', '20.682', '20.714', '2073.943735', '42991.176800364', '42991.176800364', '1'], ['1742799600000', '20.781', '20.851', '20.744', '20.8', '1241.634661', '25817.024753034', '25817.024753034', '1'], ['1742799300000', '20.774', '20.864', '20.734', '20.767', '1953.175327', '40624.089765559', '40624.089765559', '1'], ['1742799000000', '20.7', '20.793', '20.62', '20.774', '1989.887427', '41199.928034762', '41199.928034762', '1'], ['1742798700000', '20.75', '20.818', '20.58', '20.7', '5211.150251', '107796.175562313', '107796.175562313', '1'], ['1742798400000', '20.833', '20.902', '20.73', '20.75', '2517.86527', '52343.399605194', '52343.399605194', '1'], ['1742798100000', '21.078', '21.178', '20.739', '20.811', '3745.18279', '78616.225101155', '78616.225101155', '1'], ['1742797800000', '20.946', '21.184', '20.937', '21.079', '3834.723093', '80714.134954064', '80714.134954064', '1'], ['1742797500000', '20.857', '20.975', '20.857', '20.948', '2034.509455', '42529.099736442', '42529.099736442', '1'], ['1742797200000', '20.802', '20.902', '20.745', '20.855', '2186.023853', '45544.12461212', '45544.12461212', '1'], ['1742796900000', '20.779', '20.851', '20.72', '20.783', '3610.860284', '74981.937647584', '74981.937647584', '1'], ['1742796600000', '20.854', '20.854', '20.75', '20.763', '3418.357745', '71064.922908339', '71064.922908339', '1'], ['1742796300000', '20.77', '20.88', '20.76', '20.87', '4080.805896', '85023.959555874', '85023.959555874', '1'], ['1742796000000', '20.824', '20.867', '20.751', '20.781', '4376.117658', '90999.223264562', '90999.223264562', '1'], ['1742795700000', '20.916', '21.032', '20.8', '20.819', '2263.374927', '47381.3579596', '47381.3579596', '1'], ['1742795400000', '20.779', '20.95', '20.779', '20.906', '1214.355379', '25360.478833249', '25360.478833249', '1'], ['1742795100000', '20.758', '20.828', '20.75', '20.782', '1052.793915', '21880.205650453', '21880.205650453', '1'], ['1742794800000', '20.857', '20.929', '20.729', '20.757', '2237.496417', '46636.65549666', '46636.65549666', '1'], ['1742794500000', '20.828', '20.947', '20.82', '20.842', '2211.152785', '46172.505594252', '46172.505594252', '1'], ['1742794200000', '20.823', '20.837', '20.679', '20.8', '3177.817138', '66011.292737961', '66011.292737961', '1'], ['1742793900000', '20.808', '20.962', '20.789', '20.813', '2265.171063', '47270.321882199', '47270.321882199', '1'], ['1742793600000', '20.864', '20.9', '20.788', '20.808', '2780.874043', '57941.88659045', '57941.88659045', '1'], ['1742793300000', '21.042', '21.05', '20.85', '20.876', '1394.964334', '29226.729546665', '29226.729546665', '1'], ['1742793000000', '21.107', '21.161', '20.84', '21.043', '4627.128886', '97267.652230445', '97267.652230445', '1'], ['1742792700000', '20.91', '21.189', '20.843', '21.107', '3775.362756', '79333.764763129', '79333.764763129', '1'], ['1742792400000', '20.959', '20.976', '20.788', '20.917', '2218.995953', '46271.503317704', '46271.503317704', '1'], ['1742792100000', '20.95', '20.985', '20.805', '20.945', '2767.784084', '57814.806422888', '57814.806422888', '1'], ['1742791800000', '21.068', '21.198', '20.957', '20.957', '1921.783776', '40554.015999834', '40554.015999834', '1'], ['1742791500000', '21.096', '21.161', '20.988', '21.08', '1102.552497', '23243.184472235', '23243.184472235', '1'], ['1742791200000', '21.032', '21.165', '20.946', '21.088', '6911.211655', '145409.674993936', '145409.674993936', '1'], ['1742790900000', '21.192', '21.233', '21.01', '21.032', '5535.806972', '117040.474114674', '117040.474114674', '1'], ['1742790600000', '20.86', '21.25', '20.825', '21.194', '6220.564391', '130804.520417387', '130804.520417387', '1'], ['1742790300000', '20.715', '20.877', '20.67', '20.867', '3409.473433', '70921.625407085', '70921.625407085', '1'], ['1742790000000', '20.706', '20.743', '20.6', '20.721', '1587.371977', '32847.340415416', '32847.340415416', '1'], ['1742789700000', '20.722', '20.754', '20.615', '20.71', '1457.849696', '30161.495867884', '30161.495867884', '1'], ['1742789400000', '20.918', '20.929', '20.671', '20.711', '5395.205364', '111992.739353083', '111992.739353083', '1'], ['1742789100000', '21.013', '21.059', '20.851', '20.917', '4428.025684', '92784.655233016', '92784.655233016', '1'], ['1742788800000', '21.013', '21.084', '20.861', '21.005', '3953.430528', '82823.12868011', '82823.12868011', '1'], ['1742788500000', '20.838', '21.107', '20.838', '21.028', '5019.124353', '105188.017774908', '105188.017774908', '1'], ['1742788200000', '20.974', '20.974', '20.79', '20.844', '2735.008559', '57067.417570408', '57067.417570408', '1'], ['1742787900000', '20.982', '21.07', '20.932', '20.974', '2267.198379', '47640.479643888', '47640.479643888', '1'], ['1742787600000', '21.069', '21.069', '20.72', '20.992', '10043.906475', '210289.890600849', '210289.890600849', '1'], ['1742787300000', '21.225', '21.277', '21.012', '21.075', '4977.053053', '105207.986856604', '105207.986856604', '1'], ['1742787000000', '21.42', '21.421', '21.21', '21.225', '8163.630892', '173877.469942934', '173877.469942934', '1'], ['1742786700000', '21.551', '21.691', '21.418', '21.418', '6369.456242', '137402.990364387', '137402.990364387', '1'], ['1742786400000', '21.616', '21.667', '21.378', '21.544', '6627.548297', '142791.446150961', '142791.446150961', '1'], ['1742786100000', '21.707', '21.888', '21.534', '21.627', '8753.997944', '189918.92505006', '189918.92505006', '1'], ['1742785800000', '21.471', '21.749', '21.331', '21.734', '6361.841816', '136906.910363053', '136906.910363053', '1'], ['1742785500000', '21.13', '21.545', '21.1', '21.492', '5046.455233', '107826.684610037', '107826.684610037', '1'], ['1742785200000', '21.08', '21.297', '21.055', '21.143', '5034.571428', '106674.979774084', '106674.979774084', '1'], ['1742784900000', '21.293', '21.294', '21.023', '21.076', '6439.342203', '136175.99640374', '136175.99640374', '1'], ['1742784600000', '21.329', '21.49', '21.25', '21.312', '6215.163515', '132718.900341487', '132718.900341487', '1'], ['1742784300000', '21.091', '21.418', '21.031', '21.323', '4783.696402', '101457.663123168', '101457.663123168', '1'], ['1742784000000', '20.952', '21.165', '20.887', '21.09', '3212.298011', '67553.233040651', '67553.233040651', '1'], ['1742783700000', '20.998', '21', '20.828', '20.961', '5191.118483', '108820.899616704', '108820.899616704', '1'], ['1742783400000', '21.185', '21.376', '20.975', '20.979', '8054.636203', '170583.317898827', '170583.317898827', '1'], ['1742783100000', '20.738', '21.288', '20.691', '21.187', '13323.134882', '280108.076994571', '280108.076994571', '1'], ['1742782800000', '20.679', '20.863', '20.617', '20.723', '7901.494564', '164223.905437327', '164223.905437327', '1'], ['1742782500000', '21.022', '21.134', '20.65', '20.686', '16304.961371', '340473.797123571', '340473.797123571', '1'], ['1742782200000', '20.359', '21.042', '20.334', '21.015', '8740.529714', '181580.827687755', '181580.827687755', '1'], ['1742781900000', '20.324', '20.477', '20.278', '20.362', '3752.688342', '76539.969726598', '76539.969726598', '1'], ['1742781600000', '20.074', '20.4', '20.073', '20.339', '6043.947779', '122583.074736026', '122583.074736026', '1'], ['1742781300000', '19.933', '20.15', '19.925', '20.074', '4792.406151', '96076.71410214', '96076.71410214', '1'], ['1742781000000', '19.816', '20.049', '19.753', '19.937', '5086.698467', '101134.139942117', '101134.139942117', '1'], ['1742780700000', '19.893', '19.947', '19.769', '19.84', '9382.517742', '186461.502136584', '186461.502136584', '1'], ['1742780400000', '20.027', '20.061', '19.875', '19.891', '10530.565069', '210523.809007911', '210523.809007911', '1'], ['1742780100000', '20.214', '20.26', '19.715', '20.014', '9075.436593', '181832.678437358', '181832.678437358', '1'], ['1742779800000', '20.422', '20.477', '20.139', '20.189', '7082.531704', '143680.324624755', '143680.324624755', '1'], ['1742779500000', '20.345', '20.469', '20.256', '20.422', '5736.914161', '116821.498951596', '116821.498951596', '1'], ['1742779200000', '20.461', '20.507', '20.347', '20.358', '5577.498031', '113864.053350371', '113864.053350371', '1'], ['1742778900000', '20.52', '20.615', '20.36', '20.461', '9959.066819', '203797.796301152', '203797.796301152', '1'], ['1742778600000', '20.313', '20.607', '20.258', '20.511', '13250.403828', '271373.650695489', '271373.650695489', '1'], ['1742778300000', '20.407', '20.46', '20.11', '20.321', '6042.088681', '122640.138138087', '122640.138138087', '1'], ['1742778000000', '20.633', '20.72', '20.211', '20.407', '12444.602112', '254637.767358367', '254637.767358367', '1'], ['1742777700000', '21.011', '21.014', '20.555', '20.645', '12158.252161', '253239.646584675', '253239.646584675', '1'], ['1742777400000', '20.851', '21.086', '20.818', '20.997', '6286.921137', '132037.849475762', '132037.849475762', '1'], ['1742777100000', '21.045', '21.139', '20.849', '20.864', '5527.185077', '116155.16428873', '116155.16428873', '1'], ['1742776800000', '20.967', '21.204', '20.88', '21.05', '8862.894385', '186497.320108469', '186497.320108469', '1'], ['1742776500000', '21.401', '21.449', '20.89', '20.952', '16973.851425', '359471.285401124', '359471.285401124', '1'], ['1742776200000', '21.885', '21.927', '21.407', '21.409', '9730.496379', '210064.177516926', '210064.177516926', '1'], ['1742775900000', '22.07', '22.085', '21.72', '21.9', '16434.477511', '359729.85835737', '359729.85835737', '1'], ['1742775600000', '21.715', '22.365', '21.626', '22.057', '25685.573515', '565105.278276346', '565105.278276346', '1'], ['1742775300000', '21.876', '21.932', '21.456', '21.728', '21372.28761', '464116.287446952', '464116.287446952', '1'], ['1742775000000', '21.396', '21.95', '21.383', '21.9', '27281.581945', '592305.833733575', '592305.833733575', '1'], ['1742774700000', '20.861', '21.6', '20.853', '21.365', '21692.849831', '461018.615457789', '461018.615457789', '1'], ['1742774400000', '20.729', '21.233', '20.263', '20.862', '17042.946222', '354627.337085247', '354627.337085247', '1'], ['1742774100000', '20.772', '20.772', '20.48', '20.744', '6217.250649', '128461.873767382', '128461.873767382', '1'], ['1742773800000', '20.736', '20.85', '20.537', '20.794', '5336.322258', '110411.258394367', '110411.258394367', '1']]
    df = pd.DataFrame(result)
    col = ['timestamp', 'open', 'high', 'low', 'close', 'volume', 'amount', '-', '-']
    df.columns = col
    df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms').dt.tz_localize('UTC').dt.tz_convert('Asia/Phnom_Penh')
    columns = ['datetime', 'open', 'high', 'low', 'close', 'volume', 'amount', 'timestamp']
    df = df[columns].sort_values(['timestamp'], ascending=True)
    df[columns[1:]] = df[columns[1:]].apply(pd.to_numeric, errors='coerce').fillna(0.0)
    df = get_tag(df)
    managed_df = df.sort_values(['timestamp'], ascending=False)
    return_0 = managed_df['return_0'].iloc[0]
    dt = managed_df['datetime'].iloc[0]
    print(managed_df)

    if managed_df['is_san_yang'].iloc[0] == 1:
        print("三连阳")
        msg = f'👺三连阳 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)

    if managed_df['is_san_yang'].iloc[0] == 1:
        print("三连阴")
        msg = f'👺三连阴 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)

    if managed_df['is_max_price'].iloc[0] == 1:
        print("最高价")
        msg = f'👺最高价 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)

    if managed_df['is_min_price'].iloc[0] == 1:
        print("最低价")
        msg = f'👺最低价 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)

    if managed_df['is_max_volume'].iloc[0] == 1:
        print("最大量")
        msg = f'👺最大量 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)

    if managed_df['return_0'].iloc[0] >= 2:
        print("大阳柱")
        msg = f'👺大阳柱 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)

    if managed_df['return_0'].iloc[0] <= -2:
        print("大阴柱")
        msg = f'👺大阴柱 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)

    if managed_df['ma5_ma20_x'].iloc[0] > 0.004:
        print("均线趋势")
        msg = f'👺均线趋势 {title} 🍄涨幅:{return_0}% \n本地时间:{dt}'
        send_message(msg, chat_id=chat_id)
    return df


if __name__ == '__main__':
    api_key = "ff633c9f-eeb1-4073-bfbc-de5a93af409c"
    secret_key = "B0C40F0CE489B41E13B05495110D978D"
    passphrase = "Jay@541430183"
    flag = '1'
    marketAPI = MarketAPI(api_key, secret_key, passphrase, False, flag)
    # coins = get_coin()
    # coins = ['BTC-USDT', 'ETH-USDT', 'AUCTION-USDT', 'W-USDT', 'ZETA-USDT', 'NEIRO-USDT']
    coins = ['NEIRO-USDT']
    print(coins)
    for coin in coins:
        get_coin_data(coin)
